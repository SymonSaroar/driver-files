#ifndef _DRIVER_LIB_H_
#define _DRIVER_LIB_H_

/************************************************************************
*  File: driver_lib.h
*
*  Library for accessing PCI devices, possibly using a Kernel PlugIn driver.
*  The code accesses hardware using WinDriver's WDC library.
*  Code was generated by DriverWizard v15.1.1
*
*  Jungo Connectivity Confidential. Copyright (c) 2022 Jungo Connectivity Ltd.  https://www.jungo.com
*************************************************************************/

#include "wdc_lib.h"
#include "wdc_defs.h"
#include "wdc_diag_lib.h"
#include "pci_regs.h"

#include "status_strings.h"
#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************
  General definitions
 *************************************************************/
/* Kernel PlugIn driver name (should be no more than 8 characters) */
#define KP_DRIVER_DRIVER_NAME "KP_DRIVER"


/* Default vendor and device IDs (0 == all) */
/* TODO: Replace the ID values with your device's vendor and device IDs */
#define DRIVER_DEFAULT_VENDOR_ID 0x10ee /* Vendor ID */
#define DRIVER_DEFAULT_DEVICE_ID 0x903f /* Device ID */






/* Address space information struct */
#define MAX_TYPE 8
typedef struct {
    DWORD dwAddrSpace;
    CHAR sType[MAX_TYPE];
    CHAR sName[MAX_NAME];
    CHAR sDesc[MAX_DESC];
} DRIVER_ADDR_SPACE_INFO;

/* Interrupt result information struct */
typedef struct {
    DWORD dwCounter; /* Number of interrupts received */
    DWORD dwLost;    /* Number of interrupts not yet handled */
    WD_INTERRUPT_WAIT_RESULT waitResult; /* See WD_INTERRUPT_WAIT_RESULT values
                                            in windrvr.h */
    DWORD dwEnabledIntType; /* Interrupt type that was actually enabled
                               (MSI/MSI-X / Level Sensitive / Edge-Triggered) */
    DWORD dwLastMessage; /* Message data of the last received MSI/MSI-X
                            (Windows Vista and higher); N/A to line-based
                            interrupts. */
} DRIVER_INT_RESULT;
/* TODO: You can add fields to DRIVER_INT_RESULT to store any additional
         information that you wish to pass to your diagnostics interrupt
         handler routine (DiagIntHandler() in driver_diag.c). */

/* DRIVER diagnostics interrupt handler function type */
typedef void (*DRIVER_INT_HANDLER)(WDC_DEVICE_HANDLE hDev,
    DRIVER_INT_RESULT *pIntResult);

/* DRIVER diagnostics plug-and-play and power management events handler function
 * type */
typedef void (*DRIVER_EVENT_HANDLER)(WDC_DEVICE_HANDLE hDev, DWORD dwAction);



typedef struct MENU_CTX_DMA {
    WDC_DEVICE_HANDLE *phDev;
    DWORD size;
    DWORD dwOptions;
    UINT64 qwAddr;
    PVOID pBuf;
    WD_DMA *pDma;
    DWORD dwDmaAddressWidth;
} MENU_CTX_DMA;

/*************************************************************
  Function prototypes
 *************************************************************/
/* -----------------------------------------------
    DRIVER and WDC libraries initialize/uninitialize
   ----------------------------------------------- */
/* Initialize the DRIVER and WDC libraries */
DWORD DRIVER_LibInit(void);
/* Uninitialize the DRIVER and WDC libraries */
DWORD DRIVER_LibUninit(void);

#ifndef __KERNEL__
/* -----------------------------------------------
    Device open/close
   ----------------------------------------------- */
/* Open a device handle */
WDC_DEVICE_HANDLE DRIVER_DeviceOpen(DWORD dwVendorId, DWORD dwDeviceId);
/* Close a device handle */
BOOL DRIVER_DeviceClose(WDC_DEVICE_HANDLE hDev);

#if !defined(ISA) && defined(LINUX)
/* -----------------------------------------------
    SRIOV
   ----------------------------------------------- */
/* Enable SRIOV */
DWORD DRIVER_SriovEnable(WDC_DEVICE_HANDLE hDev, DWORD dwNumVFs);
/* Disable SRIOV */
DWORD DRIVER_SriovDisable(WDC_DEVICE_HANDLE hDev);
/* Get and store number of virtual functions in *pdwNumVfs */
DWORD DRIVER_SriovGetNumVFs(WDC_DEVICE_HANDLE hDev, DWORD *pdwNumVFs);
#endif

/* -----------------------------------------------
    Interrupts
   ----------------------------------------------- */
/* Enable interrupts */
DWORD DRIVER_IntEnable(WDC_DEVICE_HANDLE hDev, DRIVER_INT_HANDLER funcIntHandler);
/* Disable interrupts */
DWORD DRIVER_IntDisable(WDC_DEVICE_HANDLE hDev);
/* Check whether interrupts are enabled for the given device */
BOOL DRIVER_IntIsEnabled(WDC_DEVICE_HANDLE hDev);

/* -----------------------------------------------
    Plug-and-play and power management events
   ----------------------------------------------- */
/* Register a plug-and-play or power management event */
DWORD DRIVER_EventRegister(WDC_DEVICE_HANDLE hDev,
    DRIVER_EVENT_HANDLER funcEventHandler);
/* Unregister a plug-and-play or power management event */
DWORD DRIVER_EventUnregister(WDC_DEVICE_HANDLE hDev);
/* Check whether a given plug-and-play or power management event is registered
 */
BOOL DRIVER_EventIsRegistered(WDC_DEVICE_HANDLE hDev);

/* -----------------------------------------------
    DMA
   ----------------------------------------------- */
DWORD DRIVER_DmaAllocContig(MENU_CTX_DMA *pDmaMenusCtx);
DWORD DRIVER_DmaAllocSg(MENU_CTX_DMA *pDmaMenusCtx);
DWORD DRIVER_DmaAllocReserved(MENU_CTX_DMA *pDmaMenusCtx);
DWORD DRIVER_DmaBufUnlock(WD_DMA *pDma);
#endif /* ifndef __KERNEL */

/* -----------------------------------------------
    Address spaces information
   ----------------------------------------------- */
/* Get number of address spaces */
DWORD DRIVER_GetNumAddrSpaces(WDC_DEVICE_HANDLE hDev);
/* Get address space information */
BOOL DRIVER_GetAddrSpaceInfo(WDC_DEVICE_HANDLE hDev,
    DRIVER_ADDR_SPACE_INFO *pAddrSpaceInfo);




/* -----------------------------------------------
    Debugging and error handling
   ----------------------------------------------- */
/* Get last error */
const char *DRIVER_GetLastErr(void);

#ifdef __cplusplus
}
#endif

#endif /* _DRIVER_LIB_H_ */

